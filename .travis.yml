dist: xenial
language: cpp
os: linux
compiler: 
  - gcc
  - clang
env: 
  - JOB_CXX_FLAGS='-fsanitize=thread -g -O1'
  - JOB_CXX_FLAGS='-fsanitize=address -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-omit-frame-pointer -g -O1'
  - JOB_CXX_FLAGS='-fsanitize=leak -fno-omit-frame-pointer -g -O1'
  - JOB_CXX_FLAGS='-fsanitize=undefined' JOB_EXE_LINKER_FLAGS='-fuse-ld=gold' # https://stackoverflow.com/questions/50024731/ld-unrecognized-option-push-state-no-as-needed
before_install: 
  -
   if [ "$TRAVIS_COMPILER" = "gcc" ] ; then
     sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y `# for g++-8` ;
   fi &&
   sudo add-apt-repository ppa:beineri/opt-qt-5.11.1-xenial -y `# for Qt 5.11` &&
   sudo apt-get update ;

install:
  - &install_build_deps
   if [ "$TRAVIS_COMPILER" = "gcc" ] ; then
     sudo apt-get install -y g++-8 &&
     sudo ln -s /usr/bin/g++-8 /usr/local/bin/g++ ;
   fi &&
    sudo apt-get install -y 
      libasound2-dev 
      qt511-meta-minimal 
      libgl1-mesa-dev 
      libglu1-mesa-dev &&
    (cd /tmp && 
      wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz ; 
      mkdir googletest &&
      tar xf release-1.10.0.tar.gz -C googletest --strip-components=1 && 
      mkdir googletest/build && 
      cd googletest/build && 
      cmake -DBUILD_SHARED_LIBS=ON .. && 
      sudo make install -j$(nproc)) ;

before_script: mkdir build
script: 
  - &cmd_build (cd build && cmake -DCMAKE_CXX_FLAGS="$JOB_CXX_FLAGS" -DCMAKE_EXE_LINKER_FLAGS="$JOB_EXE_LINKER_FLAGS" $EXTRA .. && make VERBOSE=1 -j$(nproc))
  - &cmd_test (cd build && ctest)
jobs:
  include:
    - stage: test
      name: cpplint
      before_install: 
      install: sudo pip install cpplint
      env: 
      compiler: 
      script: cpplint --recursive .
    - stage: test
      name: cppcheck
      install: sudo apt-get install -y cppcheck
      env: 
      compiler: 
      script: cppcheck --enable=all --language=c++ --std=c++14 --file-list=<(find ./ -path ./build -prune -o -type f \( -iname \*.hpp -o -iname \*.cpp -o -iname *.h \) -print) --error-exitcode=2
    - stage: test
      name: clang-tidy
      env: EXTRA='-DCMAKE_CXX_CLANG_TIDY=/usr/bin/clang-tidy;-checks=*'
      compiler: clang
      install:
        - *install_build_deps
        - sudo apt-get install -y clang-tidy
      script: *cmd_build
    - stage: test
      name: IWYU
      env: EXTRA='-DCMAKE_CXX_INCLUDE_WHAT_YOU_USE=/usr/bin/iwyu;--transitive_includes_only'
      compiler: clang
      install:
        - *install_build_deps
        - sudo apt-get install -y iwyu
      script: *cmd_build
    - stage: test
      name: LWYU
      env: EXTRA='-DCMAKE_LINK_WHAT_YOU_USE=TRUE'
      compiler: clang
      script: *cmd_build
    - stage: test
      name: Clazy
      env:      
      install: 
        - *install_build_deps
        - wget https://downloads.kdab.com/clazy/1.5/Clazy-x86_64-1.5.AppImage -P ~ && chmod +x ~/Clazy-x86_64-1.5.AppImage
      compiler: 
      script: 
        - export CXX='/home/travis/Clazy-x86_64-1.5.AppImage'
        - *cmd_build
    - stage: coverage
      compiler: gcc
      install:
        - *install_build_deps
        - sudo apt-get install -y lcov
      env: JOB_CXX_FLAGS='--coverage -g -O0'  
      script: *cmd_build
      after_success: 
        - lcov --directory . --capture --output-file coverage.info
        - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
        - lcov --list coverage.info
        - bash <(curl -s https://codecov.io/bash) -f coverage.info 
